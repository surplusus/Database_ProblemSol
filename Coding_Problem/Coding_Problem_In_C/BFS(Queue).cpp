#include <iostream>
#include <string>
using namespace std;

const int MAX_SIZE = 10; // 행 열 수
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0,1,0,-1 };
int group_id;
int group[MAX_SIZE * MAX_SIZE]
int map[MAX_SIZE][MAX_SIZE];
bool visit[MAX_SIZE][MAX_SIZE];

void bfs(int x, int y) {

	queue< pair<int, int> > q; // 이용할 큐, (x,y) -> (행, 열)
	q.push(make_pair(x, y)); // pair를 만들어서 queue에 넣습니다.

	// 처음 x,y를 방문 했기때문에
	visited[x][y] = true;
	groups[group_id]++;

	while (!q.empty()) {

		// 큐의 현재 원소를 꺼내기
		x = q.front().first;
		y = q.front().second;
		q.pop();

		// 해당 위치의 주변을 확인
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			// 지도를 벗어나지 않고
			if (0 <= nx && nx < n && 0 <= ny && ny < n) {
				// 집이면서 방문하지 않았다면 -> 방문
				if (map[nx][ny] == 1 && visited[nx][ny] == false) {
					visited[nx][ny] = true;

					// 해당 단지의 집의 수를 증가시킴
					groups[group_id]++;

					// 큐에 현재 nx,ny를 추가
					q.push(make_pair(nx, ny));
				}
			}
		}
	}
}